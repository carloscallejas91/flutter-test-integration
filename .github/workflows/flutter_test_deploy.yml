name: Flutter CI/CD - Test Lab & App Distribution

on:
  push:
    branches:
      - main

jobs:
  build_test_and_distribute:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 1. Clonar o repositório
        uses: actions/checkout@v4

      - name: 2. Configurar o Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: 3. Configurar o Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.2'
          channel: stable
          cache: true

      - name: 4. Instalar dependências
        run: flutter pub get

      - name: 4a. Criar o ficheiro google-services.json a partir do Secret
        run: |
          mkdir -p android/app
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json

      - name: 5. Construir APK (app) e APK de testes (androidTest)
        run: |
          set -e

          # Opcional: remova flutter clean para builds incrementais
          flutter clean

          # APK principal (app-debug.apk)
          flutter build apk --debug

          # APK de testes (instrumentation + integration_test)
          cd android
          chmod +x ./gradlew
          ./gradlew app:assembleAndroidTest
          cd ..

          mkdir -p artifacts

          # Copiar APK principal
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            cp build/app/outputs/flutter-apk/app-debug.apk artifacts/app-debug.apk
          else
            echo "APK principal não encontrado em build/app/outputs/flutter-apk/app-debug.apk"
            exit 1
          fi

          # Copiar APK de testes (path conhecido ou encontrar dinamicamente)
          TEST_APK_PATH="build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
          if [ -f "$TEST_APK_PATH" ]; then
            cp "$TEST_APK_PATH" artifacts/app-debug-androidTest.apk
          else
            FOUND=$(find build -type f -name "*androidTest*.apk" | head -n 1 || true)
            if [ -n "$FOUND" ]; then
              echo "Encontrado APK de testes em: $FOUND"
              cp "$FOUND" artifacts/app-debug-androidTest.apk
            else
              echo "Nenhum APK de testes encontrado em build/ - falhando."
              exit 1
            fi
          fi

      - name: 5a. Inspecionar APK de testes
        run: |
          echo "Listando conteúdo do APK de testes (primeiras 200 linhas):"
          unzip -l artifacts/app-debug-androidTest.apk | sed -n '1,200p'
          if unzip -l artifacts/app-debug-androidTest.apk | grep -E "dev/flutter/plugins/integration_test|FlutterTestRunner" -i >/dev/null; then
            echo "OK: FlutterTestRunner / integration_test encontrado no APK de testes."
          else
            echo "ERRO: FlutterTestRunner / integration_test NÃO encontrado no APK de testes."
            unzip -l artifacts/app-debug-androidTest.apk
            exit 1
          fi

      - name: 5b. Upload de artifacts (APK principal e APK de teste)
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: artifacts/*.apk

      - name: 6. Instalar e au


#name: Flutter CI/CD - Test Lab & App Distribution
#
#on:
#  push:
#    branches: [ main ]
#
#jobs:
#  build_test_and_distribute:
#    runs-on: ubuntu-latest
#    # Aumenta o tempo limite total do job para 30 minutos para evitar que ele seja cancelado
#    timeout-minutes: 30
#    steps:
#      - name: 1. Clonar o repositório
#        uses: actions/checkout@v4
#
#      - name: 2. Configurar o Java (JDK)
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: 3. Configurar o Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.35.2'
#          channel: 'stable'
#          cache: true
#
#      - name: 4. Instalar dependências
#        run: flutter pub get
#
#      - name: 4a. Criar o ficheiro google-services.json a partir do Secret
#        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
#
#      - name: 5. Construir e Mover APKs
#        run: |
#          flutter clean
#
#          # APK principal da app
#          flutter build apk --debug
#
#          # APK de testes (instrumentation + integration_test)
#          cd android
#          chmod +x ./gradlew
#          ./gradlew app:assembleAndroidTest
#          cd ..
#
#          mkdir -p artifacts
#
#          # APK da aplicação
#          mv build/app/outputs/flutter-apk/app-debug.apk artifacts/app-debug.apk
#
#          # APK de testes (androidTest)
#          mv build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk artifacts/app-debug-androidTest.apk
#
#
#      - name: 6. Autenticar com o Google Cloud
#        uses: google-github-actions/auth@v2
#        with:
#          credentials_json: ${{ secrets.GCP_SA_KEY }}
#
#      - name: 7. Configurar projeto gcloud
#        run: gcloud config set project test-integration-app-4e52e
#
#      - name: 8. Executar testes no Firebase Test Lab
#        run: |
#          gcloud firebase test android run \
#            --type instrumentation \
#            --app artifacts/app-debug.apk \
#            --test artifacts/app-debug-androidTest.apk \
#            --device model=caiman,version=34 \
#            --use-orchestrator
#
#      - name: 8a. Instalar Firebase CLI Tools
#        run: npm install -g firebase-tools
#
#      - name: 9. Distribuir para QA via Firebase App Distribution
#        if: success()
#        run: |
#          firebase appdistribution:distribute artifacts/app-debug.apk \
#            --app "1:424599350937:android:5c7fd412fffd453bcb5208" \
#            --release-notes "Build do CI" \
#            --groups "qa-team" \
#            --token ${{ secrets.FIREBASE_TOKEN }}
#
