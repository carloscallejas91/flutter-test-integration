# Nome do workflow que aparecerá no separador "Actions" do GitHub.
name: Flutter CI/CD para Teste e Deploy

# 1. GATILHO (TRIGGER)
# Define quando este workflow será executado.
on:
    # Executa sempre que houver um push para o branch 'main'.
    push:
        branches: [ main ]
    # Permite a execução manual a partir da UI do GitHub.
    workflow_dispatch:

# 2. VARIÁVEIS DE AMBIENTE
# Centraliza as configurações do projeto para fácil acesso.
env:
    GCP_PROJECT_ID: 'test-integration-app-4e52e'
    FIREBASE_APP_ID: '1:42459937:android:5c7fd412fffd453bcb5208'
    FIREBASE_TESTER_GROUP: 'qa-team'

# 3. TAREFAS (JOBS)
jobs:
    # Define uma única tarefa chamada 'build-test-deploy'.
    build-test-deploy:
        # O tipo de máquina virtual em que a tarefa será executada. 'ubuntu-latest' é o padrão recomendado.
        runs-on: ubuntu-latest

        # Define os passos que compõem a tarefa.
        steps:
            # Passo 1: Checkout do Código
            # Utiliza uma action oficial para descarregar o código do seu repositório.
            - name: Checkout do Repositório
              uses: actions/checkout@v4

            # Passo 2: Configurar o Java
            # Instala a versão 17 do JDK, necessária para o Gradle do Android.
            - name: Configurar Java JDK v17
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'

            # Passo 3: Configurar o Flutter
            # Utiliza uma action popular da comunidade para instalar a versão correta do Flutter.
            - name: Configurar Flutter SDK
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.35.2'
                  channel: 'stable'

            # Passo 4: Autenticar no Google Cloud
            # Utiliza as actions oficiais do Google para autenticação segura.
            - name: Autenticar no Google Cloud
              uses: google-github-actions/auth@v2
              with:
                  # 'GCP_SA_KEY' é o nome do segredo que você criará nas configurações do seu repositório.
                  credentials_json: ${{ secrets.GCP_SA_KEY }}

            # Passo 5: Configurar o gcloud CLI
            # Prepara o ambiente para usar os comandos do Google Cloud.
            - name: Configurar gcloud CLI
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT_ID }}

            # Passo 6: Instalar o Firebase CLI
            # O Firebase CLI é necessário para a distribuição e é instalado via npm.
            - name: Instalar Firebase CLI
              run: sudo npm install -g firebase-tools

            # Passo 7: Construir e Testar a Aplicação
            - name: Construir APKs e Executar Testes no Firebase Test Lab
              run: |
                  # Ativa o tratamento de erros: o script irá parar se algum comando falhar.
                  set -e
                  
                  echo "==> A preparar o ambiente Flutter..."
                  flutter pub get
                  flutter clean
                  
                  echo "==> A regenerar ficheiros de build nativo..."
                  flutter create .
                  
                  echo "==> A construir APKs com o Gradle..."
                  # Concede permissão de execução ao gradlew e constrói ambos os APKs.
                  chmod +x android/gradlew
                  cd android
                  ./gradlew app:assembleDebug app:assembleDebugAndroidTest
                  cd ..
                  
                  echo "==> A executar testes no Firebase Test Lab..."
                  # Executa os testes de instrumentação, tratando o código de saída 10 como um sucesso com instabilidade.
                  gcloud firebase test android run \
                    --type instrumentation \
                    --app build/app/outputs/apk/debug/app-debug.apk \
                    --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
                    --device model=redfin,version=30,locale=pt_BR,orientation=portrait \
                    --timeout 15m \
                    --num-flaky-test-attempts 2 || \
                  if [ $? -eq 10 ]; then
                    echo "Testes concluídos com instabilidade (flaky), mas a considerar como sucesso."
                    exit 0
                  else
                    echo "Falha nos testes com um erro crítico."
                    exit 1
                  fi

            # Passo 8: Fazer Deploy para o Firebase App Distribution
            - name: Distribuir para QA no Firebase App Distribution
              run: |
                  firebase appdistribution:distribute build/app/outputs/apk/debug/app-debug.apk \
                    --app ${{ env.FIREBASE_APP_ID }} \
                    --release-notes "Build ${{ github.run_number }} - Aprovado nos testes." \
                    --groups "${{ env.FIREBASE_TESTER_GROUP }}"
