# Nome do workflow que aparecerá no separador "Actions" do GitHub.
name: Flutter CI/CD para Teste e Deploy

# 1. GATILHO (TRIGGER)
on:
    # Executa sempre que houver um push para o branch 'main'.
    push:
        branches: [ main ]
    # Permite a execução manual a partir da UI do GitHub.
    workflow_dispatch:

# 2. VARIÁVEIS DE AMBIENTE
env:
    GCP_PROJECT_ID: 'test-integration-app-4e52e'
    FIREBASE_APP_ID: '1:424599350937:android:5c7fd412fffd453bcb5208'
    FIREBASE_TESTER_GROUP: 'qa-team'

# 3. TAREFAS (JOBS)
jobs:
    build-test-deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout do Repositório
              uses: actions/checkout@v4

            - name: Configurar Java JDK v17
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '17'

            - name: Configurar Flutter SDK
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.35.2'
                  channel: 'stable'

            - name: Autenticar no Google Cloud
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY }}

            - name: Configurar gcloud CLI
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT_ID }}

            - name: Instalar Firebase CLI
              run: sudo npm install -g firebase-tools

            - name: Construir APK e Executar Testes no Firebase Test Lab
              run: |
                  set -e
                  echo "==> A preparar o ambiente Flutter..."
                  flutter pub get
                  
                  echo "==> A construir APK de debug..."
                  # Constrói um único APK que contém tanto a app como os testes.
                  flutter build apk --debug
                  
                  echo "==> A executar testes de instrumentação no Firebase Test Lab..."
                  # O gcloud irá extrair os testes do APK principal.
                  gcloud firebase test android run \
                    --type instrumentation \
                    --app build/app/outputs/flutter-apk/app-debug.apk \
                    --device model=redfin,version=30,locale=pt_BR,orientation=portrait \
                    --timeout 15m \
                    --num-flaky-test-attempts 2 || \
                  if [ $? -eq 10 ]; then
                    echo "Testes concluídos com instabilidade (flaky), mas a considerar como sucesso."
                    exit 0
                  else
                    echo "Falha nos testes com um erro crítico."
                    exit 1
                  fi

            - name: Distribuir para QA no Firebase App Distribution
              run: |
                  # Usa o mesmo APK que foi testado para a distribuição.
                  firebase appdistribution:distribute build/app/outputs/flutter-apk/app-debug.apk \
                    --app ${{ env.FIREBASE_APP_ID }} \
                    --release-notes "Build ${{ github.run_number }} - Aprovado nos testes." \
                    --groups "${{ env.FIREBASE_TESTER_GROUP }}"

